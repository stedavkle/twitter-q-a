/**
 * generated by Xtext 2.28.0
 */
package ddm.formatting2;

import TwitterQAModel.Game;
import TwitterQAModel.Location;
import TwitterQAModel.Test;
import TwitterQAModel.TwitterQA;
import com.google.inject.Inject;
import ddm.services.TwitterQAGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class TwitterQAFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TwitterQAGrammarAccess _twitterQAGrammarAccess;

  protected void _format(final TwitterQA twitterQA, @Extension final IFormattableDocument document) {
    EList<Game> _games = twitterQA.getGames();
    for (final Game game : _games) {
      document.<Game>format(game);
    }
    EList<Location> _locations = twitterQA.getLocations();
    for (final Location location : _locations) {
      document.<Location>format(location);
    }
  }

  protected void _format(final Game game, @Extension final IFormattableDocument document) {
    document.<Test>format(game.getInitial_test());
    EList<Test> _tests = game.getTests();
    for (final Test test : _tests) {
      document.<Test>format(test);
    }
  }

  public void format(final Object game, final IFormattableDocument document) {
    if (game instanceof XtextResource) {
      _format((XtextResource)game, document);
      return;
    } else if (game instanceof Game) {
      _format((Game)game, document);
      return;
    } else if (game instanceof TwitterQA) {
      _format((TwitterQA)game, document);
      return;
    } else if (game instanceof EObject) {
      _format((EObject)game, document);
      return;
    } else if (game == null) {
      _format((Void)null, document);
      return;
    } else if (game != null) {
      _format(game, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(game, document).toString());
    }
  }
}
