/*
 * generated by Xtext 2.28.0
 */
package ddm.serializer;

import TwitterQAModel.Game;
import TwitterQAModel.Location;
import TwitterQAModel.Test;
import TwitterQAModel.TwitterQA;
import TwitterQAModel.TwitterQAModelPackage;
import com.google.inject.Inject;
import ddm.services.TwitterQAGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TwitterQASemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TwitterQAGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TwitterQAModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TwitterQAModelPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case TwitterQAModelPackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case TwitterQAModelPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			case TwitterQAModelPackage.TWITTER_QA:
				sequence_TwitterQA(context, (TwitterQA) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString 
	 *         city=EString 
	 *         initial_test=Test 
	 *         tests+=Test 
	 *         tests+=Test*
	 *     )
	 * </pre>
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     (name=EString latitude=EDouble longitude=EDouble)
	 * </pre>
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TwitterQAModelPackage.Literals.LOCATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterQAModelPackage.Literals.LOCATION__NAME));
			if (transientValues.isValueTransient(semanticObject, TwitterQAModelPackage.Literals.LOCATION__LATITUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterQAModelPackage.Literals.LOCATION__LATITUDE));
			if (transientValues.isValueTransient(semanticObject, TwitterQAModelPackage.Literals.LOCATION__LONGITUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TwitterQAModelPackage.Literals.LOCATION__LONGITUDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLocationAccess().getLatitudeEDoubleParserRuleCall_5_0(), semanticObject.getLatitude());
		feeder.accept(grammarAccess.getLocationAccess().getLongitudeEDoubleParserRuleCall_8_0(), semanticObject.getLongitude());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         question=EString 
	 *         order=EInt 
	 *         answers+=EString 
	 *         answers+=EString* 
	 *         (hints+=EString hints+=EString*)? 
	 *         timelimit=EInt 
	 *         attempts=EInt 
	 *         reward=EInt 
	 *         location=[Location|EString] 
	 *         on_correct=[Test|EString]? 
	 *         on_timeout=[Test|EString]? 
	 *         on_fail=[Test|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TwitterQA returns TwitterQA
	 *
	 * Constraint:
	 *     (
	 *         consumer_key=EString 
	 *         consumer_secret=EString 
	 *         access_token=EString 
	 *         access_token_secret=EString 
	 *         welcome_msg=EString 
	 *         games+=Game 
	 *         games+=Game* 
	 *         locations+=Location 
	 *         locations+=Location*
	 *     )
	 * </pre>
	 */
	protected void sequence_TwitterQA(ISerializationContext context, TwitterQA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
